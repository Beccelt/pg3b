//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Pg3bWindowsFormsApplication {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("EvaDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class EvaDataSet : global::System.Data.DataSet {
        
        private DeviceDataTable tableDevice;
        
        private EventTriggerDataTable tableEventTrigger;
        
        private EventValueDataTable tableEventValue;
        
        private ActionTargetDataTable tableActionTarget;
        
        private ActionValueDataTable tableActionValue;
        
        private EvaDataTable tableEva;
        
        private global::System.Data.DataRelation relationEventTrigger_EventValue;
        
        private global::System.Data.DataRelation relationDevice_EventTrigger;
        
        private global::System.Data.DataRelation relationActionTarget_ActionValue;
        
        private global::System.Data.DataRelation relationDevice_ActionTarget;
        
        private global::System.Data.DataRelation relationEventValue_Eva;
        
        private global::System.Data.DataRelation relationActionValue_Eva;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EvaDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
            this.InitExpressions();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected EvaDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.ExcludeSchema)) {
                    this.InitExpressions();
                }
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Device"] != null)) {
                    base.Tables.Add(new DeviceDataTable(ds.Tables["Device"]));
                }
                if ((ds.Tables["EventTrigger"] != null)) {
                    base.Tables.Add(new EventTriggerDataTable(ds.Tables["EventTrigger"]));
                }
                if ((ds.Tables["EventValue"] != null)) {
                    base.Tables.Add(new EventValueDataTable(ds.Tables["EventValue"]));
                }
                if ((ds.Tables["ActionTarget"] != null)) {
                    base.Tables.Add(new ActionTargetDataTable(ds.Tables["ActionTarget"]));
                }
                if ((ds.Tables["ActionValue"] != null)) {
                    base.Tables.Add(new ActionValueDataTable(ds.Tables["ActionValue"]));
                }
                if ((ds.Tables["Eva"] != null)) {
                    base.Tables.Add(new EvaDataTable(ds.Tables["Eva"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                this.InitExpressions();
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeviceDataTable Device {
            get {
                return this.tableDevice;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EventTriggerDataTable EventTrigger {
            get {
                return this.tableEventTrigger;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EventValueDataTable EventValue {
            get {
                return this.tableEventValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ActionTargetDataTable ActionTarget {
            get {
                return this.tableActionTarget;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ActionValueDataTable ActionValue {
            get {
                return this.tableActionValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EvaDataTable Eva {
            get {
                return this.tableEva;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            EvaDataSet cln = ((EvaDataSet)(base.Clone()));
            cln.InitVars();
            cln.InitExpressions();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Device"] != null)) {
                    base.Tables.Add(new DeviceDataTable(ds.Tables["Device"]));
                }
                if ((ds.Tables["EventTrigger"] != null)) {
                    base.Tables.Add(new EventTriggerDataTable(ds.Tables["EventTrigger"]));
                }
                if ((ds.Tables["EventValue"] != null)) {
                    base.Tables.Add(new EventValueDataTable(ds.Tables["EventValue"]));
                }
                if ((ds.Tables["ActionTarget"] != null)) {
                    base.Tables.Add(new ActionTargetDataTable(ds.Tables["ActionTarget"]));
                }
                if ((ds.Tables["ActionValue"] != null)) {
                    base.Tables.Add(new ActionValueDataTable(ds.Tables["ActionValue"]));
                }
                if ((ds.Tables["Eva"] != null)) {
                    base.Tables.Add(new EvaDataTable(ds.Tables["Eva"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDevice = ((DeviceDataTable)(base.Tables["Device"]));
            if ((initTable == true)) {
                if ((this.tableDevice != null)) {
                    this.tableDevice.InitVars();
                }
            }
            this.tableEventTrigger = ((EventTriggerDataTable)(base.Tables["EventTrigger"]));
            if ((initTable == true)) {
                if ((this.tableEventTrigger != null)) {
                    this.tableEventTrigger.InitVars();
                }
            }
            this.tableEventValue = ((EventValueDataTable)(base.Tables["EventValue"]));
            if ((initTable == true)) {
                if ((this.tableEventValue != null)) {
                    this.tableEventValue.InitVars();
                }
            }
            this.tableActionTarget = ((ActionTargetDataTable)(base.Tables["ActionTarget"]));
            if ((initTable == true)) {
                if ((this.tableActionTarget != null)) {
                    this.tableActionTarget.InitVars();
                }
            }
            this.tableActionValue = ((ActionValueDataTable)(base.Tables["ActionValue"]));
            if ((initTable == true)) {
                if ((this.tableActionValue != null)) {
                    this.tableActionValue.InitVars();
                }
            }
            this.tableEva = ((EvaDataTable)(base.Tables["Eva"]));
            if ((initTable == true)) {
                if ((this.tableEva != null)) {
                    this.tableEva.InitVars();
                }
            }
            this.relationEventTrigger_EventValue = this.Relations["EventTrigger_EventValue"];
            this.relationDevice_EventTrigger = this.Relations["Device_EventTrigger"];
            this.relationActionTarget_ActionValue = this.Relations["ActionTarget_ActionValue"];
            this.relationDevice_ActionTarget = this.Relations["Device_ActionTarget"];
            this.relationEventValue_Eva = this.Relations["EventValue_Eva"];
            this.relationActionValue_Eva = this.Relations["ActionValue_Eva"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "EvaDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/EvaDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDevice = new DeviceDataTable(false);
            base.Tables.Add(this.tableDevice);
            this.tableEventTrigger = new EventTriggerDataTable(false);
            base.Tables.Add(this.tableEventTrigger);
            this.tableEventValue = new EventValueDataTable(false);
            base.Tables.Add(this.tableEventValue);
            this.tableActionTarget = new ActionTargetDataTable(false);
            base.Tables.Add(this.tableActionTarget);
            this.tableActionValue = new ActionValueDataTable(false);
            base.Tables.Add(this.tableActionValue);
            this.tableEva = new EvaDataTable();
            base.Tables.Add(this.tableEva);
            this.relationEventTrigger_EventValue = new global::System.Data.DataRelation("EventTrigger_EventValue", new global::System.Data.DataColumn[] {
                        this.tableEventTrigger.TriggerCodeColumn}, new global::System.Data.DataColumn[] {
                        this.tableEventValue.TriggerCodeColumn}, false);
            this.relationEventTrigger_EventValue.Nested = true;
            this.Relations.Add(this.relationEventTrigger_EventValue);
            this.relationDevice_EventTrigger = new global::System.Data.DataRelation("Device_EventTrigger", new global::System.Data.DataColumn[] {
                        this.tableDevice.DeviceCodeColumn}, new global::System.Data.DataColumn[] {
                        this.tableEventTrigger.DeviceCodeColumn}, false);
            this.relationDevice_EventTrigger.Nested = true;
            this.Relations.Add(this.relationDevice_EventTrigger);
            this.relationActionTarget_ActionValue = new global::System.Data.DataRelation("ActionTarget_ActionValue", new global::System.Data.DataColumn[] {
                        this.tableActionTarget.TargetCodeColumn}, new global::System.Data.DataColumn[] {
                        this.tableActionValue.TargetCodeColumn}, false);
            this.relationActionTarget_ActionValue.Nested = true;
            this.Relations.Add(this.relationActionTarget_ActionValue);
            this.relationDevice_ActionTarget = new global::System.Data.DataRelation("Device_ActionTarget", new global::System.Data.DataColumn[] {
                        this.tableDevice.DeviceCodeColumn}, new global::System.Data.DataColumn[] {
                        this.tableActionTarget.DeviceCodeColumn}, false);
            this.relationDevice_ActionTarget.Nested = true;
            this.Relations.Add(this.relationDevice_ActionTarget);
            this.relationEventValue_Eva = new global::System.Data.DataRelation("EventValue_Eva", new global::System.Data.DataColumn[] {
                        this.tableEventValue.ValueCodeColumn}, new global::System.Data.DataColumn[] {
                        this.tableEva.EventCodeColumn}, false);
            this.Relations.Add(this.relationEventValue_Eva);
            this.relationActionValue_Eva = new global::System.Data.DataRelation("ActionValue_Eva", new global::System.Data.DataColumn[] {
                        this.tableActionValue.ValueCodeColumn}, new global::System.Data.DataColumn[] {
                        this.tableEva.ActionCodeColumn}, false);
            this.Relations.Add(this.relationActionValue_Eva);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDevice() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEventTrigger() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEventValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeActionTarget() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeActionValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEva() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            EvaDataSet ds = new EvaDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitExpressions() {
            this.Device.DeviceCodeColumn.Expression = "DeviceEnum * 4096";
            this.Device.DeviceFullNameColumn.Expression = "DeviceName";
            this.EventTrigger.TriggerCodeColumn.Expression = "DeviceCode + TriggerEnum * 256";
            this.EventTrigger.TriggerFullNameColumn.Expression = "Parent.DeviceFullName+\' > \' + TriggerName";
            this.EventValue.ValueCodeColumn.Expression = "TriggerCode + ValueEnum";
            this.EventValue.ValueFullNameColumn.Expression = "Parent.TriggerFullName + \' > \' + ValueName";
            this.ActionTarget.TargetCodeColumn.Expression = "DeviceCode + TargetEnum * 256";
            this.ActionTarget.TargetFullNameColumn.Expression = "Parent.DeviceFullName + \' > \' + TargetName";
            this.ActionValue.ValueCodeColumn.Expression = "TargetCode + ValueEnum";
            this.ActionValue.ValueFullNameColumn.Expression = "Parent.TargetFullName + \' > \' + ValueName";
        }
        
        public delegate void DeviceRowChangeEventHandler(object sender, DeviceRowChangeEvent e);
        
        public delegate void EventTriggerRowChangeEventHandler(object sender, EventTriggerRowChangeEvent e);
        
        public delegate void EventValueRowChangeEventHandler(object sender, EventValueRowChangeEvent e);
        
        public delegate void ActionTargetRowChangeEventHandler(object sender, ActionTargetRowChangeEvent e);
        
        public delegate void ActionValueRowChangeEventHandler(object sender, ActionValueRowChangeEvent e);
        
        public delegate void EvaRowChangeEventHandler(object sender, EvaRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DeviceDataTable : global::System.Data.TypedTableBase<DeviceRow> {
            
            private global::System.Data.DataColumn columnDeviceEnum;
            
            private global::System.Data.DataColumn columnDeviceCode;
            
            private global::System.Data.DataColumn columnDeviceName;
            
            private global::System.Data.DataColumn columnDeviceFullName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceDataTable(bool initExpressions) {
                this.TableName = "Device";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeviceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DeviceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceEnumColumn {
                get {
                    return this.columnDeviceEnum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceCodeColumn {
                get {
                    return this.columnDeviceCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceNameColumn {
                get {
                    return this.columnDeviceName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceFullNameColumn {
                get {
                    return this.columnDeviceFullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceRow this[int index] {
                get {
                    return ((DeviceRow)(this.Rows[index]));
                }
            }
            
            public event DeviceRowChangeEventHandler DeviceRowChanging;
            
            public event DeviceRowChangeEventHandler DeviceRowChanged;
            
            public event DeviceRowChangeEventHandler DeviceRowDeleting;
            
            public event DeviceRowChangeEventHandler DeviceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDeviceRow(DeviceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceRow AddDeviceRow(int DeviceCode, string DeviceName, string DeviceFullName) {
                DeviceRow rowDeviceRow = ((DeviceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        DeviceCode,
                        DeviceName,
                        DeviceFullName};
                rowDeviceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDeviceRow);
                return rowDeviceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceRow AddDeviceRow(string DeviceName) {
                DeviceRow rowDeviceRow = ((DeviceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        DeviceName,
                        null};
                rowDeviceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDeviceRow);
                return rowDeviceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceRow FindByDeviceEnum(int DeviceEnum) {
                return ((DeviceRow)(this.Rows.Find(new object[] {
                            DeviceEnum})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DeviceDataTable cln = ((DeviceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DeviceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDeviceEnum = base.Columns["DeviceEnum"];
                this.columnDeviceCode = base.Columns["DeviceCode"];
                this.columnDeviceName = base.Columns["DeviceName"];
                this.columnDeviceFullName = base.Columns["DeviceFullName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDeviceEnum = new global::System.Data.DataColumn("DeviceEnum", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceEnum);
                this.columnDeviceCode = new global::System.Data.DataColumn("DeviceCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceCode);
                this.columnDeviceName = new global::System.Data.DataColumn("DeviceName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceName);
                this.columnDeviceFullName = new global::System.Data.DataColumn("DeviceFullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceFullName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDeviceEnum}, true));
                this.columnDeviceEnum.AutoIncrement = true;
                this.columnDeviceEnum.AllowDBNull = false;
                this.columnDeviceEnum.Unique = true;
                this.columnDeviceCode.AllowDBNull = false;
                this.columnDeviceCode.ReadOnly = true;
                this.columnDeviceName.AllowDBNull = false;
                this.columnDeviceFullName.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceRow NewDeviceRow() {
                return ((DeviceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DeviceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DeviceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.DeviceCodeColumn.Expression = "DeviceEnum * 4096";
                this.DeviceFullNameColumn.Expression = "DeviceName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DeviceRowChanged != null)) {
                    this.DeviceRowChanged(this, new DeviceRowChangeEvent(((DeviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DeviceRowChanging != null)) {
                    this.DeviceRowChanging(this, new DeviceRowChangeEvent(((DeviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DeviceRowDeleted != null)) {
                    this.DeviceRowDeleted(this, new DeviceRowChangeEvent(((DeviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DeviceRowDeleting != null)) {
                    this.DeviceRowDeleting(this, new DeviceRowChangeEvent(((DeviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDeviceRow(DeviceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EvaDataSet ds = new EvaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DeviceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EventTriggerDataTable : global::System.Data.TypedTableBase<EventTriggerRow> {
            
            private global::System.Data.DataColumn columnDeviceCode;
            
            private global::System.Data.DataColumn columnTriggerEnum;
            
            private global::System.Data.DataColumn columnTriggerCode;
            
            private global::System.Data.DataColumn columnTriggerName;
            
            private global::System.Data.DataColumn columnTriggerFullName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventTriggerDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventTriggerDataTable(bool initExpressions) {
                this.TableName = "EventTrigger";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventTriggerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EventTriggerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceCodeColumn {
                get {
                    return this.columnDeviceCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TriggerEnumColumn {
                get {
                    return this.columnTriggerEnum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TriggerCodeColumn {
                get {
                    return this.columnTriggerCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TriggerNameColumn {
                get {
                    return this.columnTriggerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TriggerFullNameColumn {
                get {
                    return this.columnTriggerFullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventTriggerRow this[int index] {
                get {
                    return ((EventTriggerRow)(this.Rows[index]));
                }
            }
            
            public event EventTriggerRowChangeEventHandler EventTriggerRowChanging;
            
            public event EventTriggerRowChangeEventHandler EventTriggerRowChanged;
            
            public event EventTriggerRowChangeEventHandler EventTriggerRowDeleting;
            
            public event EventTriggerRowChangeEventHandler EventTriggerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEventTriggerRow(EventTriggerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventTriggerRow AddEventTriggerRow(DeviceRow parentDeviceRowByDevice_EventTrigger, int TriggerCode, string TriggerName, string TriggerFullName) {
                EventTriggerRow rowEventTriggerRow = ((EventTriggerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        TriggerCode,
                        TriggerName,
                        TriggerFullName};
                if ((parentDeviceRowByDevice_EventTrigger != null)) {
                    columnValuesArray[0] = parentDeviceRowByDevice_EventTrigger[1];
                }
                rowEventTriggerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEventTriggerRow);
                return rowEventTriggerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventTriggerRow AddEventTriggerRow(DeviceRow parentDeviceRowByDevice_EventTrigger, string TriggerName) {
                EventTriggerRow rowEventTriggerRow = ((EventTriggerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        TriggerName,
                        null};
                if ((parentDeviceRowByDevice_EventTrigger != null)) {
                    columnValuesArray[0] = parentDeviceRowByDevice_EventTrigger[1];
                }
                rowEventTriggerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEventTriggerRow);
                return rowEventTriggerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventTriggerRow FindByDeviceCodeTriggerEnum(int DeviceCode, int TriggerEnum) {
                return ((EventTriggerRow)(this.Rows.Find(new object[] {
                            DeviceCode,
                            TriggerEnum})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EventTriggerDataTable cln = ((EventTriggerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EventTriggerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDeviceCode = base.Columns["DeviceCode"];
                this.columnTriggerEnum = base.Columns["TriggerEnum"];
                this.columnTriggerCode = base.Columns["TriggerCode"];
                this.columnTriggerName = base.Columns["TriggerName"];
                this.columnTriggerFullName = base.Columns["TriggerFullName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDeviceCode = new global::System.Data.DataColumn("DeviceCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceCode);
                this.columnTriggerEnum = new global::System.Data.DataColumn("TriggerEnum", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTriggerEnum);
                this.columnTriggerCode = new global::System.Data.DataColumn("TriggerCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTriggerCode);
                this.columnTriggerName = new global::System.Data.DataColumn("TriggerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTriggerName);
                this.columnTriggerFullName = new global::System.Data.DataColumn("TriggerFullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTriggerFullName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDeviceCode,
                                this.columnTriggerEnum}, true));
                this.columnDeviceCode.AllowDBNull = false;
                this.columnTriggerEnum.AutoIncrement = true;
                this.columnTriggerEnum.AllowDBNull = false;
                this.columnTriggerCode.ReadOnly = true;
                this.columnTriggerName.AllowDBNull = false;
                this.columnTriggerFullName.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventTriggerRow NewEventTriggerRow() {
                return ((EventTriggerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EventTriggerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EventTriggerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.TriggerCodeColumn.Expression = "DeviceCode + TriggerEnum * 256";
                this.TriggerFullNameColumn.Expression = "Parent.DeviceFullName+\' > \' + TriggerName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EventTriggerRowChanged != null)) {
                    this.EventTriggerRowChanged(this, new EventTriggerRowChangeEvent(((EventTriggerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EventTriggerRowChanging != null)) {
                    this.EventTriggerRowChanging(this, new EventTriggerRowChangeEvent(((EventTriggerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EventTriggerRowDeleted != null)) {
                    this.EventTriggerRowDeleted(this, new EventTriggerRowChangeEvent(((EventTriggerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EventTriggerRowDeleting != null)) {
                    this.EventTriggerRowDeleting(this, new EventTriggerRowChangeEvent(((EventTriggerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEventTriggerRow(EventTriggerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EvaDataSet ds = new EvaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EventTriggerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EventValueDataTable : global::System.Data.TypedTableBase<EventValueRow> {
            
            private global::System.Data.DataColumn columnTriggerCode;
            
            private global::System.Data.DataColumn columnValueEnum;
            
            private global::System.Data.DataColumn columnValueCode;
            
            private global::System.Data.DataColumn columnValueName;
            
            private global::System.Data.DataColumn columnValueFullName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventValueDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventValueDataTable(bool initExpressions) {
                this.TableName = "EventValue";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EventValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TriggerCodeColumn {
                get {
                    return this.columnTriggerCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueEnumColumn {
                get {
                    return this.columnValueEnum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueCodeColumn {
                get {
                    return this.columnValueCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueNameColumn {
                get {
                    return this.columnValueName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueFullNameColumn {
                get {
                    return this.columnValueFullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventValueRow this[int index] {
                get {
                    return ((EventValueRow)(this.Rows[index]));
                }
            }
            
            public event EventValueRowChangeEventHandler EventValueRowChanging;
            
            public event EventValueRowChangeEventHandler EventValueRowChanged;
            
            public event EventValueRowChangeEventHandler EventValueRowDeleting;
            
            public event EventValueRowChangeEventHandler EventValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEventValueRow(EventValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventValueRow AddEventValueRow(EventTriggerRow parentEventTriggerRowByEventTrigger_EventValue, int ValueCode, string ValueName, string ValueFullName) {
                EventValueRow rowEventValueRow = ((EventValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        ValueCode,
                        ValueName,
                        ValueFullName};
                if ((parentEventTriggerRowByEventTrigger_EventValue != null)) {
                    columnValuesArray[0] = parentEventTriggerRowByEventTrigger_EventValue[2];
                }
                rowEventValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEventValueRow);
                return rowEventValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventValueRow AddEventValueRow(EventTriggerRow parentEventTriggerRowByEventTrigger_EventValue, string ValueName) {
                EventValueRow rowEventValueRow = ((EventValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        ValueName,
                        null};
                if ((parentEventTriggerRowByEventTrigger_EventValue != null)) {
                    columnValuesArray[0] = parentEventTriggerRowByEventTrigger_EventValue[2];
                }
                rowEventValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEventValueRow);
                return rowEventValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventValueRow FindByTriggerCodeValueEnum(int TriggerCode, int ValueEnum) {
                return ((EventValueRow)(this.Rows.Find(new object[] {
                            TriggerCode,
                            ValueEnum})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EventValueDataTable cln = ((EventValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EventValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTriggerCode = base.Columns["TriggerCode"];
                this.columnValueEnum = base.Columns["ValueEnum"];
                this.columnValueCode = base.Columns["ValueCode"];
                this.columnValueName = base.Columns["ValueName"];
                this.columnValueFullName = base.Columns["ValueFullName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTriggerCode = new global::System.Data.DataColumn("TriggerCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTriggerCode);
                this.columnValueEnum = new global::System.Data.DataColumn("ValueEnum", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueEnum);
                this.columnValueCode = new global::System.Data.DataColumn("ValueCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueCode);
                this.columnValueName = new global::System.Data.DataColumn("ValueName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueName);
                this.columnValueFullName = new global::System.Data.DataColumn("ValueFullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueFullName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTriggerCode,
                                this.columnValueEnum}, true));
                this.columnTriggerCode.AllowDBNull = false;
                this.columnValueEnum.AutoIncrement = true;
                this.columnValueEnum.AllowDBNull = false;
                this.columnValueCode.AllowDBNull = false;
                this.columnValueCode.ReadOnly = true;
                this.columnValueName.AllowDBNull = false;
                this.columnValueFullName.ReadOnly = true;
                this.Namespace = "http://tempuri.org/EvaDataSet.xsd";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventValueRow NewEventValueRow() {
                return ((EventValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EventValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EventValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.ValueCodeColumn.Expression = "TriggerCode + ValueEnum";
                this.ValueFullNameColumn.Expression = "Parent.TriggerFullName + \' > \' + ValueName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EventValueRowChanged != null)) {
                    this.EventValueRowChanged(this, new EventValueRowChangeEvent(((EventValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EventValueRowChanging != null)) {
                    this.EventValueRowChanging(this, new EventValueRowChangeEvent(((EventValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EventValueRowDeleted != null)) {
                    this.EventValueRowDeleted(this, new EventValueRowChangeEvent(((EventValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EventValueRowDeleting != null)) {
                    this.EventValueRowDeleting(this, new EventValueRowChangeEvent(((EventValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEventValueRow(EventValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EvaDataSet ds = new EvaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EventValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ActionTargetDataTable : global::System.Data.TypedTableBase<ActionTargetRow> {
            
            private global::System.Data.DataColumn columnDeviceCode;
            
            private global::System.Data.DataColumn columnTargetEnum;
            
            private global::System.Data.DataColumn columnTargetCode;
            
            private global::System.Data.DataColumn columnTargetName;
            
            private global::System.Data.DataColumn columnTargetFullName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTargetDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTargetDataTable(bool initExpressions) {
                this.TableName = "ActionTarget";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActionTargetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ActionTargetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceCodeColumn {
                get {
                    return this.columnDeviceCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TargetEnumColumn {
                get {
                    return this.columnTargetEnum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TargetCodeColumn {
                get {
                    return this.columnTargetCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TargetNameColumn {
                get {
                    return this.columnTargetName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TargetFullNameColumn {
                get {
                    return this.columnTargetFullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTargetRow this[int index] {
                get {
                    return ((ActionTargetRow)(this.Rows[index]));
                }
            }
            
            public event ActionTargetRowChangeEventHandler ActionTargetRowChanging;
            
            public event ActionTargetRowChangeEventHandler ActionTargetRowChanged;
            
            public event ActionTargetRowChangeEventHandler ActionTargetRowDeleting;
            
            public event ActionTargetRowChangeEventHandler ActionTargetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddActionTargetRow(ActionTargetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTargetRow AddActionTargetRow(DeviceRow parentDeviceRowByDevice_ActionTarget, int TargetCode, string TargetName, string TargetFullName) {
                ActionTargetRow rowActionTargetRow = ((ActionTargetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        TargetCode,
                        TargetName,
                        TargetFullName};
                if ((parentDeviceRowByDevice_ActionTarget != null)) {
                    columnValuesArray[0] = parentDeviceRowByDevice_ActionTarget[1];
                }
                rowActionTargetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowActionTargetRow);
                return rowActionTargetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTargetRow AddActionTargetRow(DeviceRow parentDeviceRowByDevice_ActionTarget, string TargetName) {
                ActionTargetRow rowActionTargetRow = ((ActionTargetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        TargetName,
                        null};
                if ((parentDeviceRowByDevice_ActionTarget != null)) {
                    columnValuesArray[0] = parentDeviceRowByDevice_ActionTarget[1];
                }
                rowActionTargetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowActionTargetRow);
                return rowActionTargetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTargetRow FindByDeviceCodeTargetEnum(int DeviceCode, int TargetEnum) {
                return ((ActionTargetRow)(this.Rows.Find(new object[] {
                            DeviceCode,
                            TargetEnum})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ActionTargetDataTable cln = ((ActionTargetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ActionTargetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDeviceCode = base.Columns["DeviceCode"];
                this.columnTargetEnum = base.Columns["TargetEnum"];
                this.columnTargetCode = base.Columns["TargetCode"];
                this.columnTargetName = base.Columns["TargetName"];
                this.columnTargetFullName = base.Columns["TargetFullName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDeviceCode = new global::System.Data.DataColumn("DeviceCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceCode);
                this.columnTargetEnum = new global::System.Data.DataColumn("TargetEnum", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTargetEnum);
                this.columnTargetCode = new global::System.Data.DataColumn("TargetCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTargetCode);
                this.columnTargetName = new global::System.Data.DataColumn("TargetName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTargetName);
                this.columnTargetFullName = new global::System.Data.DataColumn("TargetFullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTargetFullName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDeviceCode,
                                this.columnTargetEnum}, true));
                this.columnDeviceCode.AllowDBNull = false;
                this.columnTargetEnum.AutoIncrement = true;
                this.columnTargetEnum.AllowDBNull = false;
                this.columnTargetCode.ReadOnly = true;
                this.columnTargetName.AllowDBNull = false;
                this.columnTargetFullName.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTargetRow NewActionTargetRow() {
                return ((ActionTargetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ActionTargetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ActionTargetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.TargetCodeColumn.Expression = "DeviceCode + TargetEnum * 256";
                this.TargetFullNameColumn.Expression = "Parent.DeviceFullName + \' > \' + TargetName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ActionTargetRowChanged != null)) {
                    this.ActionTargetRowChanged(this, new ActionTargetRowChangeEvent(((ActionTargetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ActionTargetRowChanging != null)) {
                    this.ActionTargetRowChanging(this, new ActionTargetRowChangeEvent(((ActionTargetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ActionTargetRowDeleted != null)) {
                    this.ActionTargetRowDeleted(this, new ActionTargetRowChangeEvent(((ActionTargetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ActionTargetRowDeleting != null)) {
                    this.ActionTargetRowDeleting(this, new ActionTargetRowChangeEvent(((ActionTargetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveActionTargetRow(ActionTargetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EvaDataSet ds = new EvaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ActionTargetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ActionValueDataTable : global::System.Data.TypedTableBase<ActionValueRow> {
            
            private global::System.Data.DataColumn columnTargetCode;
            
            private global::System.Data.DataColumn columnValueEnum;
            
            private global::System.Data.DataColumn columnValueCode;
            
            private global::System.Data.DataColumn columnValueName;
            
            private global::System.Data.DataColumn columnValueFullName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionValueDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionValueDataTable(bool initExpressions) {
                this.TableName = "ActionValue";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActionValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ActionValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TargetCodeColumn {
                get {
                    return this.columnTargetCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueEnumColumn {
                get {
                    return this.columnValueEnum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueCodeColumn {
                get {
                    return this.columnValueCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueNameColumn {
                get {
                    return this.columnValueName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueFullNameColumn {
                get {
                    return this.columnValueFullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionValueRow this[int index] {
                get {
                    return ((ActionValueRow)(this.Rows[index]));
                }
            }
            
            public event ActionValueRowChangeEventHandler ActionValueRowChanging;
            
            public event ActionValueRowChangeEventHandler ActionValueRowChanged;
            
            public event ActionValueRowChangeEventHandler ActionValueRowDeleting;
            
            public event ActionValueRowChangeEventHandler ActionValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddActionValueRow(ActionValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionValueRow AddActionValueRow(ActionTargetRow parentActionTargetRowByActionTarget_ActionValue, int ValueCode, string ValueName, string ValueFullName) {
                ActionValueRow rowActionValueRow = ((ActionValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        ValueCode,
                        ValueName,
                        ValueFullName};
                if ((parentActionTargetRowByActionTarget_ActionValue != null)) {
                    columnValuesArray[0] = parentActionTargetRowByActionTarget_ActionValue[2];
                }
                rowActionValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowActionValueRow);
                return rowActionValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionValueRow AddActionValueRow(ActionTargetRow parentActionTargetRowByActionTarget_ActionValue, string ValueName) {
                ActionValueRow rowActionValueRow = ((ActionValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        ValueName,
                        null};
                if ((parentActionTargetRowByActionTarget_ActionValue != null)) {
                    columnValuesArray[0] = parentActionTargetRowByActionTarget_ActionValue[2];
                }
                rowActionValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowActionValueRow);
                return rowActionValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionValueRow FindByTargetCodeValueEnum(int TargetCode, int ValueEnum) {
                return ((ActionValueRow)(this.Rows.Find(new object[] {
                            TargetCode,
                            ValueEnum})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ActionValueDataTable cln = ((ActionValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ActionValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTargetCode = base.Columns["TargetCode"];
                this.columnValueEnum = base.Columns["ValueEnum"];
                this.columnValueCode = base.Columns["ValueCode"];
                this.columnValueName = base.Columns["ValueName"];
                this.columnValueFullName = base.Columns["ValueFullName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTargetCode = new global::System.Data.DataColumn("TargetCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTargetCode);
                this.columnValueEnum = new global::System.Data.DataColumn("ValueEnum", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueEnum);
                this.columnValueCode = new global::System.Data.DataColumn("ValueCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueCode);
                this.columnValueName = new global::System.Data.DataColumn("ValueName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueName);
                this.columnValueFullName = new global::System.Data.DataColumn("ValueFullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueFullName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTargetCode,
                                this.columnValueEnum}, true));
                this.columnTargetCode.AllowDBNull = false;
                this.columnValueEnum.AutoIncrement = true;
                this.columnValueEnum.AllowDBNull = false;
                this.columnValueCode.AllowDBNull = false;
                this.columnValueCode.ReadOnly = true;
                this.columnValueName.AllowDBNull = false;
                this.columnValueFullName.ReadOnly = true;
                this.Namespace = "http://tempuri.org/EvaDataSet.xsd";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionValueRow NewActionValueRow() {
                return ((ActionValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ActionValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ActionValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.ValueCodeColumn.Expression = "TargetCode + ValueEnum";
                this.ValueFullNameColumn.Expression = "Parent.TargetFullName + \' > \' + ValueName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ActionValueRowChanged != null)) {
                    this.ActionValueRowChanged(this, new ActionValueRowChangeEvent(((ActionValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ActionValueRowChanging != null)) {
                    this.ActionValueRowChanging(this, new ActionValueRowChangeEvent(((ActionValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ActionValueRowDeleted != null)) {
                    this.ActionValueRowDeleted(this, new ActionValueRowChangeEvent(((ActionValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ActionValueRowDeleting != null)) {
                    this.ActionValueRowDeleting(this, new ActionValueRowChangeEvent(((ActionValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveActionValueRow(ActionValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EvaDataSet ds = new EvaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ActionValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EvaDataTable : global::System.Data.TypedTableBase<EvaRow> {
            
            private global::System.Data.DataColumn columnEventCode;
            
            private global::System.Data.DataColumn columnActionCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EvaDataTable() {
                this.TableName = "Eva";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EvaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EvaDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventCodeColumn {
                get {
                    return this.columnEventCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActionCodeColumn {
                get {
                    return this.columnActionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EvaRow this[int index] {
                get {
                    return ((EvaRow)(this.Rows[index]));
                }
            }
            
            public event EvaRowChangeEventHandler EvaRowChanging;
            
            public event EvaRowChangeEventHandler EvaRowChanged;
            
            public event EvaRowChangeEventHandler EvaRowDeleting;
            
            public event EvaRowChangeEventHandler EvaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEvaRow(EvaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EvaRow AddEvaRow(EventValueRow parentEventValueRowByEventValue_Eva, ActionValueRow parentActionValueRowByActionValue_Eva) {
                EvaRow rowEvaRow = ((EvaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentEventValueRowByEventValue_Eva != null)) {
                    columnValuesArray[0] = parentEventValueRowByEventValue_Eva[2];
                }
                if ((parentActionValueRowByActionValue_Eva != null)) {
                    columnValuesArray[1] = parentActionValueRowByActionValue_Eva[2];
                }
                rowEvaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEvaRow);
                return rowEvaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EvaRow FindByEventCodeActionCode(int EventCode, int ActionCode) {
                return ((EvaRow)(this.Rows.Find(new object[] {
                            EventCode,
                            ActionCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EvaDataTable cln = ((EvaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EvaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEventCode = base.Columns["EventCode"];
                this.columnActionCode = base.Columns["ActionCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEventCode = new global::System.Data.DataColumn("EventCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventCode);
                this.columnActionCode = new global::System.Data.DataColumn("ActionCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActionCode);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEventCode,
                                this.columnActionCode}, true));
                this.columnEventCode.AllowDBNull = false;
                this.columnActionCode.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EvaRow NewEvaRow() {
                return ((EvaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EvaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EvaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EvaRowChanged != null)) {
                    this.EvaRowChanged(this, new EvaRowChangeEvent(((EvaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EvaRowChanging != null)) {
                    this.EvaRowChanging(this, new EvaRowChangeEvent(((EvaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EvaRowDeleted != null)) {
                    this.EvaRowDeleted(this, new EvaRowChangeEvent(((EvaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EvaRowDeleting != null)) {
                    this.EvaRowDeleting(this, new EvaRowChangeEvent(((EvaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEvaRow(EvaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EvaDataSet ds = new EvaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EvaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DeviceRow : global::System.Data.DataRow {
            
            private DeviceDataTable tableDevice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeviceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDevice = ((DeviceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DeviceEnum {
                get {
                    return ((int)(this[this.tableDevice.DeviceEnumColumn]));
                }
                set {
                    this[this.tableDevice.DeviceEnumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DeviceCode {
                get {
                    return ((int)(this[this.tableDevice.DeviceCodeColumn]));
                }
                set {
                    this[this.tableDevice.DeviceCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceName {
                get {
                    return ((string)(this[this.tableDevice.DeviceNameColumn]));
                }
                set {
                    this[this.tableDevice.DeviceNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceFullName {
                get {
                    try {
                        return ((string)(this[this.tableDevice.DeviceFullNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeviceFullName\' in table \'Device\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDevice.DeviceFullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeviceFullNameNull() {
                return this.IsNull(this.tableDevice.DeviceFullNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeviceFullNameNull() {
                this[this.tableDevice.DeviceFullNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventTriggerRow[] GetEventTriggerRows() {
                if ((this.Table.ChildRelations["Device_EventTrigger"] == null)) {
                    return new EventTriggerRow[0];
                }
                else {
                    return ((EventTriggerRow[])(base.GetChildRows(this.Table.ChildRelations["Device_EventTrigger"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTargetRow[] GetActionTargetRows() {
                if ((this.Table.ChildRelations["Device_ActionTarget"] == null)) {
                    return new ActionTargetRow[0];
                }
                else {
                    return ((ActionTargetRow[])(base.GetChildRows(this.Table.ChildRelations["Device_ActionTarget"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EventTriggerRow : global::System.Data.DataRow {
            
            private EventTriggerDataTable tableEventTrigger;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventTriggerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEventTrigger = ((EventTriggerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DeviceCode {
                get {
                    return ((int)(this[this.tableEventTrigger.DeviceCodeColumn]));
                }
                set {
                    this[this.tableEventTrigger.DeviceCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TriggerEnum {
                get {
                    return ((int)(this[this.tableEventTrigger.TriggerEnumColumn]));
                }
                set {
                    this[this.tableEventTrigger.TriggerEnumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TriggerCode {
                get {
                    try {
                        return ((int)(this[this.tableEventTrigger.TriggerCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TriggerCode\' in table \'EventTrigger\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventTrigger.TriggerCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TriggerName {
                get {
                    return ((string)(this[this.tableEventTrigger.TriggerNameColumn]));
                }
                set {
                    this[this.tableEventTrigger.TriggerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TriggerFullName {
                get {
                    try {
                        return ((string)(this[this.tableEventTrigger.TriggerFullNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TriggerFullName\' in table \'EventTrigger\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventTrigger.TriggerFullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceRow DeviceRow {
                get {
                    return ((DeviceRow)(this.GetParentRow(this.Table.ParentRelations["Device_EventTrigger"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Device_EventTrigger"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTriggerCodeNull() {
                return this.IsNull(this.tableEventTrigger.TriggerCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTriggerCodeNull() {
                this[this.tableEventTrigger.TriggerCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTriggerFullNameNull() {
                return this.IsNull(this.tableEventTrigger.TriggerFullNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTriggerFullNameNull() {
                this[this.tableEventTrigger.TriggerFullNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventValueRow[] GetEventValueRows() {
                if ((this.Table.ChildRelations["EventTrigger_EventValue"] == null)) {
                    return new EventValueRow[0];
                }
                else {
                    return ((EventValueRow[])(base.GetChildRows(this.Table.ChildRelations["EventTrigger_EventValue"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EventValueRow : global::System.Data.DataRow {
            
            private EventValueDataTable tableEventValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEventValue = ((EventValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TriggerCode {
                get {
                    return ((int)(this[this.tableEventValue.TriggerCodeColumn]));
                }
                set {
                    this[this.tableEventValue.TriggerCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueEnum {
                get {
                    return ((int)(this[this.tableEventValue.ValueEnumColumn]));
                }
                set {
                    this[this.tableEventValue.ValueEnumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueCode {
                get {
                    return ((int)(this[this.tableEventValue.ValueCodeColumn]));
                }
                set {
                    this[this.tableEventValue.ValueCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValueName {
                get {
                    return ((string)(this[this.tableEventValue.ValueNameColumn]));
                }
                set {
                    this[this.tableEventValue.ValueNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValueFullName {
                get {
                    try {
                        return ((string)(this[this.tableEventValue.ValueFullNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueFullName\' in table \'EventValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventValue.ValueFullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventTriggerRow EventTriggerRow {
                get {
                    return ((EventTriggerRow)(this.GetParentRow(this.Table.ParentRelations["EventTrigger_EventValue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EventTrigger_EventValue"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueFullNameNull() {
                return this.IsNull(this.tableEventValue.ValueFullNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueFullNameNull() {
                this[this.tableEventValue.ValueFullNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EvaRow[] GetEvaRows() {
                if ((this.Table.ChildRelations["EventValue_Eva"] == null)) {
                    return new EvaRow[0];
                }
                else {
                    return ((EvaRow[])(base.GetChildRows(this.Table.ChildRelations["EventValue_Eva"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ActionTargetRow : global::System.Data.DataRow {
            
            private ActionTargetDataTable tableActionTarget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActionTargetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableActionTarget = ((ActionTargetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DeviceCode {
                get {
                    return ((int)(this[this.tableActionTarget.DeviceCodeColumn]));
                }
                set {
                    this[this.tableActionTarget.DeviceCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TargetEnum {
                get {
                    return ((int)(this[this.tableActionTarget.TargetEnumColumn]));
                }
                set {
                    this[this.tableActionTarget.TargetEnumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TargetCode {
                get {
                    try {
                        return ((int)(this[this.tableActionTarget.TargetCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TargetCode\' in table \'ActionTarget\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActionTarget.TargetCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TargetName {
                get {
                    return ((string)(this[this.tableActionTarget.TargetNameColumn]));
                }
                set {
                    this[this.tableActionTarget.TargetNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TargetFullName {
                get {
                    try {
                        return ((string)(this[this.tableActionTarget.TargetFullNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TargetFullName\' in table \'ActionTarget\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActionTarget.TargetFullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceRow DeviceRow {
                get {
                    return ((DeviceRow)(this.GetParentRow(this.Table.ParentRelations["Device_ActionTarget"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Device_ActionTarget"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTargetCodeNull() {
                return this.IsNull(this.tableActionTarget.TargetCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTargetCodeNull() {
                this[this.tableActionTarget.TargetCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTargetFullNameNull() {
                return this.IsNull(this.tableActionTarget.TargetFullNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTargetFullNameNull() {
                this[this.tableActionTarget.TargetFullNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionValueRow[] GetActionValueRows() {
                if ((this.Table.ChildRelations["ActionTarget_ActionValue"] == null)) {
                    return new ActionValueRow[0];
                }
                else {
                    return ((ActionValueRow[])(base.GetChildRows(this.Table.ChildRelations["ActionTarget_ActionValue"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ActionValueRow : global::System.Data.DataRow {
            
            private ActionValueDataTable tableActionValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActionValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableActionValue = ((ActionValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TargetCode {
                get {
                    return ((int)(this[this.tableActionValue.TargetCodeColumn]));
                }
                set {
                    this[this.tableActionValue.TargetCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueEnum {
                get {
                    return ((int)(this[this.tableActionValue.ValueEnumColumn]));
                }
                set {
                    this[this.tableActionValue.ValueEnumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueCode {
                get {
                    return ((int)(this[this.tableActionValue.ValueCodeColumn]));
                }
                set {
                    this[this.tableActionValue.ValueCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValueName {
                get {
                    return ((string)(this[this.tableActionValue.ValueNameColumn]));
                }
                set {
                    this[this.tableActionValue.ValueNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValueFullName {
                get {
                    try {
                        return ((string)(this[this.tableActionValue.ValueFullNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueFullName\' in table \'ActionValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActionValue.ValueFullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTargetRow ActionTargetRow {
                get {
                    return ((ActionTargetRow)(this.GetParentRow(this.Table.ParentRelations["ActionTarget_ActionValue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ActionTarget_ActionValue"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueFullNameNull() {
                return this.IsNull(this.tableActionValue.ValueFullNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueFullNameNull() {
                this[this.tableActionValue.ValueFullNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EvaRow[] GetEvaRows() {
                if ((this.Table.ChildRelations["ActionValue_Eva"] == null)) {
                    return new EvaRow[0];
                }
                else {
                    return ((EvaRow[])(base.GetChildRows(this.Table.ChildRelations["ActionValue_Eva"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EvaRow : global::System.Data.DataRow {
            
            private EvaDataTable tableEva;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EvaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEva = ((EvaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventCode {
                get {
                    return ((int)(this[this.tableEva.EventCodeColumn]));
                }
                set {
                    this[this.tableEva.EventCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ActionCode {
                get {
                    return ((int)(this[this.tableEva.ActionCodeColumn]));
                }
                set {
                    this[this.tableEva.ActionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventValueRow EventValueRow {
                get {
                    return ((EventValueRow)(this.GetParentRow(this.Table.ParentRelations["EventValue_Eva"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EventValue_Eva"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionValueRow ActionValueRow {
                get {
                    return ((ActionValueRow)(this.GetParentRow(this.Table.ParentRelations["ActionValue_Eva"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ActionValue_Eva"]);
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DeviceRowChangeEvent : global::System.EventArgs {
            
            private DeviceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceRowChangeEvent(DeviceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EventTriggerRowChangeEvent : global::System.EventArgs {
            
            private EventTriggerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventTriggerRowChangeEvent(EventTriggerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventTriggerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EventValueRowChangeEvent : global::System.EventArgs {
            
            private EventValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventValueRowChangeEvent(EventValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ActionTargetRowChangeEvent : global::System.EventArgs {
            
            private ActionTargetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTargetRowChangeEvent(ActionTargetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionTargetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ActionValueRowChangeEvent : global::System.EventArgs {
            
            private ActionValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionValueRowChangeEvent(ActionValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EvaRowChangeEvent : global::System.EventArgs {
            
            private EvaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EvaRowChangeEvent(EvaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EvaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591